{%- from "shibboleth/idp/map.jinja" import shibidp_settings with context -%}
# LDAP authentication configuration, see authn/ldap-authn-config.xml
# Note, this doesn't apply to the use of JAAS

## Authenticator strategy, either anonSearchAuthenticator, bindSearchAuthenticator, directAuthenticator, adAuthenticator
{%- if shibidp_settings.ldap_authenticator == None %}
#idp.authn.LDAP.authenticator                   = anonSearchAuthenticator
{%- else %}
idp.authn.LDAP.authenticator                    = {{ shibidp_settings.ldap_authenticator }}
{%- endif %}

## Connection properties ##
{%- if shibidp_settings.ldap_url == None %}
idp.authn.LDAP.ldapURL                          = ldap://localhost:10389
{%- else %}
idp.authn.LDAP.ldapURL                          = {{ shibidp_settings.ldap_url }}
{%- endif %}
{%- if shibidp_settings.ldap_use_starttls == None %}
#idp.authn.LDAP.useStartTLS                     = true
{%- else %}
idp.authn.LDAP.useStartTLS                      = {{ shibidp_settings.ldap_use_starttls }}
{%- endif %}
{%- if shibidp_settings.ldap_use_ssl == None %}
#idp.authn.LDAP.useSSL                          = false
{%- else %}
idp.authn.LDAP.useSSL                           = {{ shibidp_settings.ldap_use_ssl }}
{%- endif %}
{%- if shibidp_settings.ldap_connect_timeout == None %}
#idp.authn.LDAP.connectTimeout                  = 3000
{%- else %}
idp.authn.LDAP.connectTimeout                   = {{ shibidp_settings.ldap_connect_timeout }}
{%- endif %}

## SSL configuration, either jvmTrust, certificateTrust, or keyStoreTrust
{%- if shibidp_settings.ldap_ssl_config == None %}
#idp.authn.LDAP.sslConfig                       = certificateTrust
{%- else %}
idp.authn.LDAP.sslConfig                        = {{ shibidp_settings.ldap_ssl_config }}
{%- endif %}
## If using certificateTrust above, set to the trusted certificate's path
idp.authn.LDAP.trustCertificates                = %{idp.home}/credentials/ldap-server.crt
## If using keyStoreTrust above, set to the truststore path
idp.authn.LDAP.trustStore                       = %{idp.home}/credentials/ldap-server.truststore

## Return attributes during authentication
## NOTE: there is a separate property used for attribute resolution
{%- if shibidp_settings.ldap_return_attributes == None %}
idp.authn.LDAP.returnAttributes                 = passwordExpirationTime,loginGraceRemaining
{%- else %}
idp.authn.LDAP.returnAttributes                 = {{ shibidp_settings.ldap_return_attributes|join(',') }}
{%- endif %}

## DN resolution properties ##

# Search DN resolution, used by anonSearchAuthenticator, bindSearchAuthenticator
# for AD: CN=Users,DC=example,DC=org
{%- if shibidp_settings.ldap_base_dn == None %}
idp.authn.LDAP.baseDN                           = ou=people,dc=example,dc=org
{%- else %}
idp.authn.LDAP.baseDN                           = {{ shibidp_settings.ldap_base_dn }}
{%- endif %}
{%- if shibidp_settings.ldap_subtree_search == None %}
#idp.authn.LDAP.subtreeSearch                   = false
{%- else %}
idp.authn.LDAP.subtreeSearch                    = {{ 'true' if shibidp_settings.ldap_subtree_search else 'false' }}
{%- endif %}
{%- if shibidp_settings.ldap_user_filter == None %}
idp.authn.LDAP.userFilter                       = (uid={user})
{%- else %}
idp.authn.LDAP.userFilter                       = {{ shibidp_settings.ldap_user_filter }}
{%- endif %}
# bind search configuration
# for AD: idp.authn.LDAP.bindDN=adminuser@domain.com
{%- if shibidp_settings.ldap_bind_dn == None %}
idp.authn.LDAP.bindDN                           = uid=myservice,ou=system
{%- else %}
idp.authn.LDAP.bindDN                           = {{ shibidp_settings.ldap_bind_dn }}
{%- endif %}
{%- if shibidp_settings.ldap_bind_credential == None %}
idp.authn.LDAP.bindDNCredential                 = myServicePassword
{%- else %}
idp.authn.LDAP.bindDNCredential                 = {{ shibidp_settings.ldap_bind_credential }}
{%- endif %}

# Format DN resolution, used by directAuthenticator, adAuthenticator
# for AD use idp.authn.LDAP.dnFormat=%s@domain.com
{%- if shibidp_settings.ldap_dn_format == None %}
idp.authn.LDAP.dnFormat                         = uid=%s,ou=people,dc=example,dc=org
{%- else %}
idp.authn.LDAP.dnFormat                         = {{ shibidp_settings.ldap_dn_format }}
{%- endif %}

# LDAP attribute configuration, see attribute-resolver.xml
# Note, this likely won't apply to the use of legacy V2 resolver configurations
idp.attribute.resolver.LDAP.ldapURL             = %{idp.authn.LDAP.ldapURL}
idp.attribute.resolver.LDAP.baseDN              = %{idp.authn.LDAP.baseDN:undefined}
idp.attribute.resolver.LDAP.bindDN              = %{idp.authn.LDAP.bindDN:undefined}
idp.attribute.resolver.LDAP.bindDNCredential    = %{idp.authn.LDAP.bindDNCredential:undefined}
idp.attribute.resolver.LDAP.useStartTLS         = %{idp.authn.LDAP.useStartTLS:true}
idp.attribute.resolver.LDAP.trustCertificates   = %{idp.authn.LDAP.trustCertificates:undefined}
{%- if shibidp_settings.attribute_resolver_ldap_search_filter == None %}
idp.attribute.resolver.LDAP.searchFilter        = (uid=$resolutionContext.principal)
{%- else %}
idp.attribute.resolver.LDAP.searchFilter        = {{ shibidp_settings.attribute_resolver_ldap_search_filter }}
{%- endif %}
{%- if shibidp_settings.attribute_resolver_ldap_return_attributes == None %}
idp.attribute.resolver.LDAP.returnAttributes    = cn,homephone,mail
{%- else %}
idp.attribute.resolver.LDAP.returnAttributes    = {{ shibidp_settings.attribute_resolver_ldap_return_attributes|join(',') }}
{%- endif %}

# LDAP pool configuration, used for both authn and DN resolution
{%- if shibidp_settings.ldap_pool_size_minimum == None %}
#idp.pool.LDAP.minSize                          = 3
{%- else %}
idp.pool.LDAP.minSize                           = {{ shibidp_settings.ldap_pool_size_minimum }}
{%- endif %}
{%- if shibidp_settings.ldap_pool_size_maximum == None %}
#idp.pool.LDAP.maxSize                          = 10
{%- else %}
idp.pool.LDAP.maxSize                           = {{ shibidp_settings.ldap_pool_size_maximum }}
{%- endif %}
{%- if shibidp_settings.ldap_pool_validate_on_checkout == None %}
#idp.pool.LDAP.validateOnCheckout               = false
{%- else %}
idp.pool.LDAP.validateOnCheckout                = {{ 'true' if shibidp_settings.ldap_pool_validate_on_checkout else 'false' }}
{%- endif %}
{%- if shibidp_settings.ldap_pool_validate_periodically == None %}
#idp.pool.LDAP.validatePeriodically             = true
{%- else %}
idp.pool.LDAP.validatePeriodically              = {{ 'true' if shibidp_settings.ldap_pool_validate_periodically else 'false' }}
{%- endif %}
{%- if shibidp_settings.ldap_pool_validate_period == None %}
#idp.pool.LDAP.validatePeriod                   = 300
{%- else %}
idp.pool.LDAP.validatePeriod                    = {{ shibidp_settings.ldap_pool_validate_period }}
{%- endif %}
{%- if shibidp_settings.ldap_pool_prune_period == None %}
#idp.pool.LDAP.prunePeriod                      = 300
{%- else %}
idp.pool.LDAP.prunePeriod = {{ shibidp_settings.ldap_pool_prune_period }}
{%- endif %}
{%- if shibidp_settings.ldap_pool_idle_time == None %}
#idp.pool.LDAP.idleTime                         = 600
{%- else %}
idp.pool.LDAP.idleTime                          = {{ shibidp_settings.ldap_pool_idle_time }}
{%- endif %}
{%- if shibidp_settings.ldap_pool_block_wait_time == None %}
#idp.pool.LDAP.blockWaitTime                    = 3000
{%- else %}
idp.pool.LDAP.blockWaitTime                     = {{ shibidp_settings.ldap_pool_block_wait_time }}
{%- endif %}
{%- if shibidp_settings.ldap_pool_fail_fast_initialize == None %}
#idp.pool.LDAP.failFastInitialize               = false
{%- else %}
idp.pool.LDAP.failFastInitialize                = {{ 'true' if shibidp_settings.ldap_pool_fail_fast_initialize else 'false' }}
{%- endif %}
