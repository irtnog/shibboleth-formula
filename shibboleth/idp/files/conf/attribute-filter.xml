{%- from "shibboleth/idp/map.jinja" import shibidp_settings with context -%}
{%- from "shibboleth/idp/lib.jinja" import generate_policy with context -%}
<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    This file is an EXAMPLE policy file.  While the policy presented in this 
    example file is illustrative of some simple cases, it relies on the names of
    non-existent example services and the example attributes demonstrated in the
    default attribute-resolver.xml file.
    
    Deployers should refer to the documentation for a complete list of components
    and their options.
-->
<AttributeFilterPolicyGroup id="ShibbolethFilterPolicy"
        xmlns="urn:mace:shibboleth:2.0:afp"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:mace:shibboleth:2.0:afp http://shibboleth.net/schema/idp/shibboleth-afp.xsd">

    <!-- Release some attributes to an SP. -->
    <!--
    <AttributeFilterPolicy id="example1">
        <PolicyRequirementRule xsi:type="Requester" value="https://sp.example.org" />

        <AttributeRule attributeID="eduPersonPrincipalName">
            <PermitValueRule xsi:type="ANY" />
        </AttributeRule>

        <AttributeRule attributeID="uid">
            <PermitValueRule xsi:type="ANY" />
        </AttributeRule>

        <AttributeRule attributeID="mail">
            <PermitValueRule xsi:type="ANY" />
        </AttributeRule>
    </AttributeFilterPolicy>
    -->

    <!-- Release eduPersonAffiliation to two specific SPs. -->
    <!--
    <AttributeFilterPolicy id="example2">
        <PolicyRequirementRule xsi:type="OR">
            <Rule xsi:type="Requester" value="https://sp.example.org" />
            <Rule xsi:type="Requester" value="https://another.example.org/shibboleth" />
        </PolicyRequirementRule>

        <AttributeRule attributeID="eduPersonScopedAffiliation">
            <PermitValueRule xsi:type="ANY" />
        </AttributeRule>
    </AttributeFilterPolicy>
    -->
    {% for afp in shibidp_settings.attribute_filter_policies %}
    <AttributeFilterPolicy id="_{{ loop.index }}">{{ generate_policy('PolicyRequirementRule', afp.if) }}
        {%- for ar in afp.then %}
        <AttributeRule attributeID="{{ ar.release }}">
          {%- if 'permit' in ar %}{{ generate_policy('PermitValueRule', ar.permit, indent=12) }}
          {%- elif 'deny' in ar %}{{ generate_policy('DenyValueRule', ar.deny, indent=12) }}
          {%- endif %}
        </AttributeRule>
        {%- endfor %}
    </AttributeFilterPolicy>
    {% endfor %}
</AttributeFilterPolicyGroup>
