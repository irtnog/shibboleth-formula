{%- from "shibboleth/idp/map.jinja" import shibidp with context -%}
<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    This file is an EXAMPLE configuration file. While the configuration
    presented in this example file is semi-functional, it isn't very
    interesting. It is here only as a starting point for your deployment
    process.
    
    Very few attribute definitions and data connectors are demonstrated,
    and the data is derived statically from the logged-in username and a
    static example connector.

    Attribute-resolver-full.xml contains more examples of attributes,
    encoders, and data connectors. Deployers should refer to the Shibboleth
    documentation for a complete list of components and their options.
-->
<AttributeResolver
        xmlns="urn:mace:shibboleth:2.0:resolver"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:schemaLocation="urn:mace:shibboleth:2.0:resolver http://shibboleth.net/schema/idp/shibboleth-attribute-resolver.xsd">

    <!-- ========================================== -->
    <!--      Attribute Definitions                 -->
    <!-- ========================================== -->

    <!--
    The EPPN is the "standard" federated username in higher ed.
    For guidelines on the implementation of this attribute, refer
    to the Shibboleth and eduPerson documentation. Above all, do
    not expose a value for this attribute without considering the
    long term implications. 
    -->
    <!--
    <AttributeDefinition id="eduPersonPrincipalName" xsi:type="Scoped" scope="%{idp.scope}" sourceAttributeID="uid">
        <Dependency ref="uid" />
        <AttributeEncoder xsi:type="SAML1ScopedString" name="urn:mace:dir:attribute-def:eduPersonPrincipalName" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2ScopedString" name="urn:oid:1.3.6.1.4.1.5923.1.1.1.6" friendlyName="eduPersonPrincipalName" encodeType="false" />
    </AttributeDefinition>
    -->

    <!--
    The uid is the closest thing to a "standard" LDAP attribute
    representing a local username, but you should generally *never*
    expose uid to federated services, as it is rarely globally unique.
    -->
    <!--
    <AttributeDefinition id="uid" xsi:type="PrincipalName">
        <AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:uid" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2String" name="urn:oid:0.9.2342.19200300.100.1.1" friendlyName="uid" encodeType="false" />
    </AttributeDefinition>
    -->

    <!--
    In the rest of the world, the email address is the standard identifier,
    despite the problems with that practice. Consider making the EPPN
    value the same as your official email addresses whenever possible.
    -->
    <!--
    <AttributeDefinition id="mail" xsi:type="Template">
        <Dependency ref="uid" />
        <AttributeEncoder xsi:type="SAML1String" name="urn:mace:dir:attribute-def:mail" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2String" name="urn:oid:0.9.2342.19200300.100.1.3" friendlyName="mail" encodeType="false" />
        <Template>
          <![CDATA[
               ${uid}@example.org
          ]]>
        </Template>
        <SourceAttribute>uid</SourceAttribute>
    </AttributeDefinition>
    -->

    <!--
    This is an example of an attribute sourced from a data connector.
    -->
    <!--
    <AttributeDefinition id="eduPersonScopedAffiliation" xsi:type="Scoped" scope="%{idp.scope}" sourceAttributeID="affiliation">
        <Dependency ref="staticAttributes" />
        <AttributeEncoder xsi:type="SAML1ScopedString" name="urn:mace:dir:attribute-def:eduPersonScopedAffiliation" encodeType="false" />
        <AttributeEncoder xsi:type="SAML2ScopedString" name="urn:oid:1.3.6.1.4.1.5923.1.1.1.9" friendlyName="eduPersonScopedAffiliation" encodeType="false" />
    </AttributeDefinition>
    -->
{% for attrdef in shibidp.resolver_attribute_definitions %}
    <AttributeDefinition{{ {
        'id': attrdef['id'],
        'xsi:type': attrdef['type'],
        'scope': attrdef['scope']|default(None),
        'sourceAttributeID': attrdef['source_attribute_id']|default(None),
      }|xmlattr }}>
        {%- for dependency in attrdef['dependencies']|default([]) %}
        <Dependency{{ { 'ref': dependency }|xmlattr }}/>
        {%- endfor %}
        {%- for attrenc in attrdef['attribute_encoders']|default([]) %}
        <AttributeEncoder{{ {
            'xsi:type': attrenc['type'],
            'name': attrenc['name'],
            'friendlyName': attrenc['friendly_name']|default(None),
            'nameFormat': attrenc['format']|default(None),
            'encodeType':
              None if 'encode_type' not in attrenc else
              'true' if attrenc['encode_type'] else
              'false',
          }|xmlattr }} />
        {%- endfor %}
        {%- if 'template' in attrdef %}
        <Template>
          <![CDATA[
               {{ attrdef['template']|indent(15) }}
          ]]>
        </Template>
        {%- endif %}
        {%- for source_attribute in attrdef['source_attributes']|default([]) %}
        <SourceAttribute>{{ source_attribute }}</SourceAttribute>
        {%- endfor %}
    </AttributeDefinition>
{% endfor %}
    <!-- ========================================== -->
    <!--      Data Connectors                       -->
    <!-- ========================================== -->

    <!--
    <DataConnector id="staticAttributes" xsi:type="Static">
        <Attribute id="affiliation">
            <Value>member</Value>
        </Attribute>
    </DataConnector>
    -->
{% for dataconn in shibidp.resolver_data_connectors %}
    <DataConnector{{ {
        'id': dataconn['id'],
        'xsi:type': dataconn['type'],
        'activationConditionRef': dataconn['activation_condition']|default(None),
        'springResources':
          None if 'spring_resources' not in dataconn else
          dataconn['spring_resources']|join(';')
            if dataconn['spring_resources'] is sequence
            and dataconn['spring_resources'] is not string else
          dataconn['spring_resources'],
        'springResourcesRef': dataconn['spring_resources_reference']|default(None),
        'factoryPostProcessorsRef': dataconn['factory_post_processors']|default(None),
        'postProcessorsRef': dataconn['post_processors']|default(None),
        'profileContextStrategyRef': dataconn['profile_context_strategy']|default(None),
        'noRetryDelay': dataconn['no_retry_delay']|default(None),
        'ldapURL': dataconn['url']|default(None),
        'baseDN': dataconn['base_dn']|default(None),
        'principal': dataconn['bind_dn']|default(None),
        'principalCredential': dataconn['bind_credential']|default(None),
        'lowercaseAttributeNames':
          None if 'lowercase_attribute_names' not in dataconn else
          'true' if dataconn['lowercase_attribute_names'] else
          'false',
        'trustFile': dataconn['trust_file']|default(None),
        'connectionStrategy': dataconn['connection_strategy']|default(None),
        'authenticationType': dataconn['auth_type']|default(None),
        'searchScope': dataconn['search_scope']|default(None),
        'useStartTLS':
          None if 'use_starttls' not in dataconn else
          dataconn['use_starttls'] if dataconn['use_starttls'] is string else
          'true' if dataconn['use_starttls'] else
          'false',
        'searchTimeLimit': dataconn['search_time_limit']|default(None),
        'maxResultSize': dataconn['max_result_size']|default(None),
        'noResultIsError':
          None if 'no_result_is_error' not in dataconn else
          dataconn['no_result_is_error']
            if dataconn['no_result_is_error'] is string else
          'true' if dataconn['no_result_is_error'] else
          'false',
        'multipleResultsIsError':
          None if 'multiple_results_is_error' not in dataconn else
          dataconn['multiple_results_is_error']
            if dataconn['multiple_results_is_error'] is string else
          'true' if dataconn['multiple_results_is_error'] else
          'false',
        'templateEngine': dataconn['template_engine']|default(None),
        'mappingStrategyRef': dataconn['mapping_strategy']|default(None),
        'validatorRef': dataconn['validator']|default(None)
      }|xmlattr }}>
        {%- for dependency in dataconn['dependencies']|default([]) %}
        <Dependency ref="{{ dependency }}"/> #}
        {%- endfor %}
        {%- for fdc in dataconn['failover_data_connectors']|default([]) %}
        <FailoverDataConnector ref="{{ fdc }}"/> #}
        {%- endfor %}
        {%- for attrib in dataconn['attributes']|default([]) %}
        <Attribute{{ {
            'id': attrib['id'],
          }|xmlattr }}>
            {%- if attrib['value'] is sequence
                and attrib['value'] is not string %}
            {%- for value in attrib['value'] %}
            <Value>{{ value }}</Value>
            {%- endfor %}
            {%- else %}
            <Value>{{ attrib['value'] }}</Value>
            {%- endif %}
        </Attribute>
        {%- endfor %}
        {%- if 'filter_template' in dataconn %}
        <FilterTemplate>
          <![CDATA[
                   {{ dataconn['filter_template'] }}
          ]]>
        </FilterTemplate>
        {%- endif %}
        {%- if 'return_attributes' in dataconn %}
        <ReturnAttributes>{{
          dataconn['return_attributes']|join(' ')
            if dataconn['return_attributes'] is sequence
            and dataconn['return_attributes'] is not string else
          dataconn['return_attributes']
        }}</ReturnAttributes>
        {%- endif %}
        {%- for prop in dataconn['ldap_properties']|default([]) %}
        <LDAPProperty{{ {
            'name': prop['property'],
            'value': prop['value'],
          }|xmlattr }}/>
        {%- endfor %}
        {#- TODO: write a generic renderer for security credentials #}
        {#- <StartTLSTrustCredential>...</StartTLSTrustCredential> #}
        {#- <StartTLSAuthenticationCredential>...</StartTLSAuthenticationCredential> #}
        {%- set conn_pool_properties = {
            'minPoolSize': dataconn['min_pool_size']|default(None),
            'maxPoolSize': dataconn['max_pool_size']|default(None),
            'blockWhenEmpty':
              None if 'block_when_empty' not in dataconn else
              'true' if dataconn['block_when_empty'] else
              'false',
            'blockWaitTime': dataconn['block_wait_time']|default(None),
            'validatePeriodically':
              None if 'validate_periodically' not in dataconn else
              'true' if dataconn['validate_periodically'] else
              'false',
            'validateTimerPeriod': dataconn['validate_timer_period']|default(None),
            'validateDN': dataconn['validate_dn']|default(None),
            'validateFilter': dataconn['validate_filter']|default(None),
            'expirationTime': dataconn['expiration_time']|default(None),
            'failFastInitialize':
              None if 'fail_fast_init' not in dataconn else
              'true' if dataconn['fail_fast_init'] else
              'false',
          }|xmlattr(False) %}
        {%- if conn_pool_properties != '' %}
        <ConnectionPool {{ conn_pool_properties }}/>
        {%- endif %}
        {%- for column_name, attribute_id in dataconn['column_attribute_map']|default({}) %}
        <Column{{ {
            'columnName': column_name,
            'attributeID': attribute_id,
          }|xmlattr }}/>
        {%- endfor %}
        {%- set result_cache_properties = {
            'maximumCachedElements': dataconn['max_cached_elements']|default(None),
            'elementTimeToLive': dataconn['cached_element_ttl']|default(None),
          }|xmlattr(False) %}
        {%- if result_cache_properties != '' %}
        <ResultCache {{ result_cache_properties }}/>
        {%- endif %}
        {%- if 'result_cache' in dataconn %}
        <ResultCacheBean>{{ dataconn['result_cache'] }}</ResultCacheBean>
        {%- endif %}
    </DataConnector>
{% endfor %}
</AttributeResolver>
