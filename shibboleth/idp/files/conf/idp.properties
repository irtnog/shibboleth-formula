{%- from "shibboleth/idp/map.jinja" import shibidp_settings with context -%}

# Load any additional property resources from a comma-delimited list
idp.additionalProperties= /conf/ldap.properties, /conf/saml-nameid.properties, /conf/services.properties

# Set the entityID of the IdP
idp.entityID= {{ shibidp_settings.entity_id }}

# Set the scope used in the attribute resolver for scoped attributes
idp.scope= {{ shibidp_settings.scope }}

# General cookie properties (maxAge only applies to persistent cookies)
{%- if shibidp_settings.cookie_secure == None %}
#idp.cookie.secure = false
{%- else %}
idp.cookie.secure = {{ 'true' if shibidp_settings.cookie_secure else 'false' }}
{%- endif %}
{%- if shibidp_settings.cookie_http_only == None %}
#idp.cookie.httpOnly = true
{%- else %}
idp.cookie.httpOnly = {{ 'true' if shibidp_settings.cookie_http_only else 'false' }}
{%- endif %}
{%- if shibidp_settings.cookie_domain == None %}
#idp.cookie.domain =
{%- else %}
idp.cookie.domain = {{ shibidp_settings.cookie_domain }}
{%- endif %}
{%- if shibidp_settings.cookie_path == None %}
#idp.cookie.path =
{%- else %}
idp.cookie.path = {{ shibidp_settings.cookie_path }}
{%- endif %}
{%- if shibidp_settings.cookie_max_age == None %}
#idp.cookie.maxAge = 31536000
{%- else %}
idp.cookie.maxAge = {{ shibidp_settings.cookie_max_age }}
{%- endif %}

# Set the location of user-supplied web flow definitions
#idp.webflows = %{idp.home}/flows

# Set the location of Velocity view templates
#idp.views = %{idp.home}/views

# Settings for internal AES encryption key
#idp.sealer.storeType = JCEKS
#idp.sealer.updateInterval = PT15M
#idp.sealer.aliasBase = secret
idp.sealer.storeResource= %{idp.home}/credentials/sealer.jks
idp.sealer.versionResource= %{idp.home}/credentials/sealer.kver
idp.sealer.storePassword= {{ shibidp_settings.sealer_password }}
idp.sealer.keyPassword= {{ shibidp_settings.sealer_password }}

# Settings for public/private signing and encryption key(s)
# During decryption key rollover, point the ".2" properties at a second
# keypair, uncomment in credentials.xml, then publish it in your metadata.
idp.signing.key= %{idp.home}/credentials/idp-signing.key
idp.signing.cert= %{idp.home}/credentials/idp-signing.crt
idp.encryption.key= %{idp.home}/credentials/idp-encryption.key
idp.encryption.cert= %{idp.home}/credentials/idp-encryption.crt
#idp.encryption.key.2 = %{idp.home}/credentials/idp-encryption-old.key
#idp.encryption.cert.2 = %{idp.home}/credentials/idp-encryption-old.crt

# Sets the bean ID to use as a default security configuration set
{%- if shibidp_settings.security_config == None %}
#idp.security.config = shibboleth.DefaultSecurityConfiguration
{%- else %}
idp.security.config = {{ shibidp_settings.security_config }}
{%- endif %}

# To default to SHA-1, set to shibboleth.SigningConfiguration.SHA1
{%- if shibidp_settings.signing_config == None %}
#idp.signing.config = shibboleth.SigningConfiguration.SHA256
{%- else %}
idp.signing.config = {{ shibidp_settings.signing_config }}
{%- endif %}

# Configures trust evaluation of keys used by services at runtime
# Defaults to supporting both explicit key and PKIX using SAML metadata.
{%- if shibidp_settings.trust_signatures == None %}
#idp.trust.signatures = shibboleth.ChainingSignatureTrustEngine
# To pick only one set to one of:
#   shibboleth.ExplicitKeySignatureTrustEngine, shibboleth.PKIXSignatureTrustEngine
{%- else %}
idp.trust.signatures = {{ shibidp_settings.trust_signatures }}
{%- endif %}
{%- if shibidp_settings.trust_certificates == None %}
#idp.trust.certificates = shibboleth.ChainingX509TrustEngine
# To pick only one set to one of:
#   shibboleth.ExplicitKeyX509TrustEngine, shibboleth.PKIXX509TrustEngine
{%- else %}
idp.trust.certificates = {{ shibidp_settings.trust_certificates }}
{%- endif %}

# If true, encryption will happen whenever a key to use can be located, but
# failure to encrypt won't result in request failure.
{%- if shibidp_settings.encryption_optional == None %}
#idp.encryption.optional = false
{%- else %}
idp.encryption.optional = {{ 'true' if shibidp_settings.encryption_optional else 'false' }}
{%- endif %}

# Configuration of client- and server-side storage plugins
{%- if shibidp_settings.storage_cleanup_interval == None %}
#idp.storage.cleanupInterval = PT10M
{%- else %}
idp.storage.cleanupInterval = {{ shibidp_settings.storage_cleanup_interval }}
{%- endif %}
{%- if shibidp_settings.storage_html_localstorage == None %}
#idp.storage.htmlLocalStorage = false
{%- else %}
idp.storage.htmlLocalStorage = {{ 'true' if shibidp_settings.storage_html_localstorage else 'false' }}
{%- endif %}

# Set to true to expose more detailed errors in responses to SPs
{%- if shibidp_settings.errors_detailed == None %}
#idp.errors.detailed = false
{%- else %}
idp.errors.detailed = {{ 'true' if shibidp_settings.errors_detailed else 'false' }}
{%- endif %}
# Set to false to skip signing of SAML response messages that signal errors
{%- if shibidp_settings.errors_signed == None %}
#idp.errors.signed = true
{%- else %}
idp.errors.signed = {{ 'true' if shibidp_settings.errors_signed else 'false' }}
{%- endif %}
# Name of bean containing a list of Java exception classes to ignore
{%- if shibidp_settings.errors_excluded_exceptions == None %}
#idp.errors.excludedExceptions = ExceptionClassListBean
{%- else %}
idp.errors.excludedExceptions = {{ shibidp_settings.errors_excluded_exceptions }}
{%- endif %}
# Name of bean containing a property set mapping exception names to views
{%- if shibidp_settings.errors_exception_mappings == None %}
#idp.errors.exceptionMappings = ExceptionToViewPropertyBean
{%- else %}
idp.errors.exceptionMappings = {{ shibidp_settings.errors_exception_mappings }}
{%- endif %}
# Set if a different default view name for events and exceptions is needed
{%- if shibidp_settings.errors_default_view == None %}
#idp.errors.defaultView = error
{%- else %}
idp.errors.defaultView = {{ shibidp_settings.errors_default_view }}
{%- endif %}

# Set to false to disable the IdP session layer
{%- if shibidp_settings.session_enabled == None %}
#idp.session.enabled = true
{%- else %}
idp.session.enabled = {{ 'true' if shibidp_settings.session_enabled else 'false' }}
{%- endif %}

# Set to "shibboleth.StorageService" for server-side storage of user sessions
{%- if shibidp_settings.session_storage_service == None %}
#idp.session.StorageService = shibboleth.ClientSessionStorageService
{%- else %}
idp.session.StorageService = {{ shibidp_settings.session_storage_service }}
{%- endif %}

# Size of session IDs
{%- if shibidp_settings.session_id_size == None %}
#idp.session.idSize = 32
{%- else %}
idp.session.idSize = {{ shibidp_settings.session_id_size }}
{%- endif %}
# Bind sessions to IP addresses
{%- if shibidp_settings.session_consistent_address == None %}
#idp.session.consistentAddress = true
{%- else %}
idp.session.consistentAddress = {{ 'true' if shibidp_settings.session_consistent_address else 'false' }}
{%- endif %}
# Inactivity timeout
{%- if shibidp_settings.session_timeout == None %}
#idp.session.timeout = PT60M
{%- else %}
idp.session.timeout = {{ shibidp_settings.session_timeout }}
{%- endif %}
# Extra time to store sessions for logout
{%- if shibidp_settings.session_slop == None %}
#idp.session.slop = PT0S
{%- else %}
idp.session.slop = {{ shibidp_settings.session_slop }}
{%- endif %}
# Tolerate storage-related errors
{%- if shibidp_settings.session_mask_storage_failure == None %}
#idp.session.maskStorageFailure = false
{%- else %}
idp.session.maskStorageFailure = {{ 'true' if shibidp_settings.session_mask_storage_failure else 'false' }}
{%- endif %}
# Track information about SPs logged into
{%- if shibidp_settings.session_track_sp_session == None %}
#idp.session.trackSPSessions = false
{%- else %}
idp.session.trackSPSessions = {{ 'true' if shibidp_settings.session_track_sp_session else 'false' }}
{%- endif %}
# Support lookup by SP for SAML logout
{%- if shibidp_settings.session_secondary_service_index == None %}
#idp.session.secondaryServiceIndex = false
{%- else %}
idp.session.secondaryServiceIndex = {{ 'true' if shibidp_settings.session_secondary_service_index else 'false' }}
{%- endif %}
# Length of time to track SP sessions
{%- if shibidp_settings.session_default_sp_lifetime == None %}
#idp.session.defaultSPlifetime = PT2H
{%- else %}
idp.session.defaultSPlifetime = {{ shibidp_settings.session_default_sp_lifetime }}
{%- endif %}

# Regular expression matching login flows to enable, e.g. IPAddress|Password
{%- if shibidp_settings.authn_flows == None %}
idp.authn.flows= Password
{%- else %}
idp.authn.flows = {{ shibidp_settings.authn_flows
                       if shibidp_settings.authn_flows is string else
                     shibidp_settings.authn_flows|join('|') }}
{%- endif %}

# Regular expression of forced "initial" methods when no session exists,
# usually in conjunction with the idp.authn.resolveAttribute property below.
{%- if shibidp_settings.authn_flows_initial == None %}
#idp.authn.flows.initial = Password
{%- else %}
idp.authn.flows.initial = {{ shibidp_settings.authn_flows_initial }}
{%- endif %}

# Set to an attribute ID to resolve prior to selecting authentication flows;
# its values are used to filter the flows to allow.
{%- if shibidp_settings.authn_resolve_attribute == None %}
#idp.authn.resolveAttribute = eduPersonAssurance
{%- else %}
idp.authn.resolveAttribute = {{ shibidp_settings.authn_resolve_attribute }}
{%- endif %}

# Default lifetime and timeout of various authentication methods
{%- if shibidp_settings.authn_default_lifetime == None %}
#idp.authn.defaultLifetime = PT60M
{%- else %}
idp.authn.defaultLifetime = {{ shibidp_settings.authn_default_lifetime }}
{%- endif %}
{%- if shibidp_settings.authn_default_timeout == None %}
#idp.authn.defaultTimeout = PT30M
{%- else %}
idp.authn.defaultTimeout = {{ shibidp_settings.authn_default_timeout }}
{%- endif %}

# Whether to prioritize "active" results when an SP requests more than
# one possible matching login method (V2 behavior was to favor them)
{%- if shibidp_settings.authn_favor_sso == None %}
#idp.authn.favorSSO = true
{%- else %}
idp.authn.favorSSO = {{ 'true' if shibidp_settings.authn_favor_sso else 'false' }}
{%- endif %}

# Whether to fail requests when a user identity after authentication
# doesn't match the identity in a pre-existing session.
{%- if shibidp_settings.authn_identity_switch_is_error == None %}
#idp.authn.identitySwitchIsError = false
{%- else %}
idp.authn.identitySwitchIsError = {{ 'true' if shibidp_settings.authn_identity_switch_is_error else 'false' }}
{%- endif %}

# Set to "shibboleth.StorageService" or custom bean for alternate storage of consent
{%- if shibidp_settings.consent_storage_service == None %}
#idp.consent.StorageService = shibboleth.ClientPersistentStorageService
{%- else %}
idp.consent.StorageService = {{ shibidp_settings.consent_storage_service }}
{%- endif %}

# Set to "shibboleth.consent.AttributeConsentStorageKey" to use an attribute
# to key user consent storage records (and set the attribute name)
{%- if shibidp_settings.consent_user_storage_key == None %}
#idp.consent.userStorageKey = shibboleth.consent.PrincipalConsentStorageKey
{%- else %}
idp.consent.userStorageKey = {{ shibidp_settings.consent_user_storage_key }}
{%- endif %}
{%- if shibidp_settings.consent_user_storage_key_attribute == None %}
#idp.consent.userStorageKeyAttribute = uid
{%- else %}
idp.consent.userStorageKeyAttribute = {{ shibidp_settings.consent_user_storage_key_attribute }}
{%- endif %}

# Flags controlling how built-in attribute consent feature operates
{%- if shibidp_settings.consent_allow_do_not_remember == None %}
#idp.consent.allowDoNotRemember = true
{%- else %}
idp.consent.allowDoNotRemember = {{ 'true' if shibidp_settings.consent_allow_do_not_remember else 'false' }}
{%- endif %}
{%- if shibidp_settings.consent_allow_global == None %}
#idp.consent.allowGlobal = true
{%- else %}
idp.consent.allowGlobal = {{ 'true' if shibidp_settings.consent_allow_global else 'false' }}
{%- endif %}
{%- if shibidp_settings.consent_allow_per_attribute == None %}
#idp.consent.allowPerAttribute = false
{%- else %}
idp.consent.allowPerAttribute = {{ 'true' if shibidp_settings.consent_allow_per_attribute else 'false' }}
{%- endif %}

# Whether attribute values and terms of use text are compared
{%- if shibidp_settings.consent_compare_values == None %}
#idp.consent.compareValues = false
{%- else %}
idp.consent.compareValues = {{ 'true' if shibidp_settings.consent_compare_values else 'false' }}
{%- endif %}
# Maximum number of consent records for space-limited storage (e.g. cookies)
{%- if shibidp_settings.consent_max_stored_records == None %}
#idp.consent.maxStoredRecords = 10
{%- else %}
idp.consent.maxStoredRecords = {{ shibidp_settings.consent_max_stored_records }}
{%- endif %}
# Maximum number of consent records for larger/server-side storage (0 = no limit)
{%- if shibidp_settings.consent_expanded_max_stored_records == None %}
#idp.consent.expandedMaxStoredRecords = 0
{%- else %}
idp.consent.expandedMaxStoredRecords = {{ shibidp_settings.consent_expanded_max_stored_records }}
{%- endif %}

# Time in milliseconds to expire consent storage records.
{%- if shibidp_settings.consent_storage_record_lifetime == None %}
#idp.consent.storageRecordLifetime = P1Y
{%- else %}
idp.consent.storageRecordLifetime = {{ shibidp_settings.consent_storage_record_lifetime }}
{%- endif %}

# Whether to lookup metadata, etc. for every SP involved in a logout
# for use by user interface logic; adds overhead so off by default.
{%- if shibidp_settings.logout_elaboration == None %}
#idp.logout.elaboration = false
{%- else %}
idp.logout.elaboration = {{ 'true' if shibidp_settings.logout_elaboration else 'false' }}
{%- endif %}

# Whether to require logout requests be signed/authenticated.
{%- if shibidp_settings.logout_authenticated == None %}
#idp.logout.authenticated = true
{%- else %}
idp.logout.authenticated = {{ 'true' if shibidp_settings.logout_authenticated else 'false' }}
{%- endif %}

# Message freshness and replay cache tuning
{%- if shibidp_settings.policy_message_lifetime == None %}
#idp.policy.messageLifetime = PT3M
{%- else %}
idp.policy.messageLifetime = {{ shibidp_settings.policy_message_lifetime }}
{%- endif %}
{%- if shibidp_settings.policy_clock_skew == None %}
#idp.policy.clockSkew = PT3M
{%- else %}
idp.policy.clockSkew = {{ shibidp_settings.policy_clock_skew }}
{%- endif %}

# Set to custom bean for alternate storage of replay cache
{%- if shibidp_settings.replay_cache_storage_service == None %}
#idp.replayCache.StorageService = shibboleth.StorageService
{%- else %}
idp.replayCache.StorageService = {{ shibidp_settings.replay_cache_storage_service }}
{%- endif %}

# Toggles whether to allow outbound messages via SAML artifact
{%- if shibidp_settings.artifact_enabled == None %}
#idp.artifact.enabled = true
{%- else %}
idp.artifact.enabled = {{ 'true' if shibidp_settings.artifact_enabled else 'false' }}
{%- endif %}
# Suppresses typical signing/encryption when artifact binding used
{%- if shibidp_settings.artifact_secure_channel == None %}
#idp.artifact.secureChannel = true
{%- else %}
idp.artifact.secureChannel = {{ 'true' if shibidp_settings.artifact_secure_channel else 'false' }}
{%- endif %}
# May differ to direct SAML 2 artifact lookups to specific server nodes
{%- if shibidp_settings.artifact_endpoint_index == None %}
#idp.artifact.endpointIndex = 2
{%- else %}
idp.artifact.endpointIndex = {{ shibidp_settings.artifact_endpoint_index }}
{%- endif %}
# Set to custom bean for alternate storage of artifact map state
{%- if shibidp_settings.artifact_storage_service == None %}
#idp.artifact.StorageService = shibboleth.StorageService
{%- else %}
idp.artifact.StorageService = {{ shibidp_settings.artifact_storage_service }}
{%- endif %}

# Name of access control policy for various admin flows
{%- if shibidp_settings.status_access_policy == None %}
idp.status.accessPolicy= AccessByIPAddress
{%- else %}
idp.status.accessPolicy= {{ shibidp_settings.status_access_policy }}
{%- endif %}
{%- if shibidp_settings.resolver_test_access_policy == None %}
idp.resolvertest.accessPolicy= AccessByIPAddress
{%- else %}
idp.resolvertest.accessPolicy= {{ shibidp_settings.resolver_test_access_policy }}
{%- endif %}
{%- if shibidp_settings.reload_access_policy == None %}
idp.reload.accessPolicy= AccessByIPAddress
{%- else %}
idp.reload.accessPolicy= {{ shibidp_settings.reload_access_policy }}
{%- endif %}

# Comma-delimited languages to use if not match can be found with the
# browser-supported languages, defaults to an empty list.
{%- if shibidp_settings.ui_fallback_languages == None %}
idp.ui.fallbackLanguages= en,fr,de
{%- else %}
idp.ui.fallbackLanguages= {{ shibidp_settings.ui_fallback_languages|join(',') }}
{%- endif %}

# Storage service used by CAS protocol
# Defaults to shibboleth.StorageService (in-memory)
# MUST be server-side storage (e.g. in-memory, memcached, database)
# NOTE that idp.session.StorageService requires server-side storage
# when CAS protocol is enabled
{%- if shibidp_settings.cas_storage_service == None %}
#idp.cas.StorageService=shibboleth.StorageService
{%- else %}
idp.cas.StorageService={{ shibidp_settings.cas_storage_service }}
{%- endif %}

# CAS service registry implementation class
{%- if shibidp_settings.cas_service_registry_class == None %}
#idp.cas.serviceRegistryClass=net.shibboleth.idp.cas.service.PatternServiceRegistry
{%- else %}
idp.cas.serviceRegistryClass={{ shibidp_settings.cas_service_registry_class }}
{%- endif %}

# Profile flows in which the ProfileRequestContext should be exposed
# in servlet request under the key "opensamlProfileRequestContext"
{%- if shibidp_settings.profile_expose_request_context == None %}
#idp.profile.exposeProfileRequestContextInServletRequest = SAML2/POST/SSO,SAML2/Redirect/SSO
{%- else %}
idp.profile.exposeProfileRequestContextInServletRequest = {{ shibidp_settings.profile_expose_request_context|join(',') }}
{%- endif %}

# F-TICKS auditing - set salt to include hashed username
{%- if shibidp_settings.fticks_federation == None %}
#idp.fticks.federation=MyFederation
{%- else %}
idp.fticks.federation={{ shibidp_settings.fticks_federation }}
{%- endif %}
{%- if shibidp_settings.fticks_algorithm == None %}
#idp.fticks.algorithm=SHA-256
{%- else %}
idp.fticks.algorithm={{ shibidp_settings.fticks_algorithm }}
{%- endif %}
{%- if shibidp_settings.fticks_salt == None %}
#idp.fticks.salt=somethingsecret
{%- else %}
idp.fticks.salt={{ shibidp_settings.fticks_salt }}
{%- endif %}
