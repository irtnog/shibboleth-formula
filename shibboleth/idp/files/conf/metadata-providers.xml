{%- from "shibboleth/idp/map.jinja" import shibidp_settings with context -%}
<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is an EXAMPLE metadata configuration file. -->
<MetadataProvider id="ShibbolethMetadata" xsi:type="ChainingMetadataProvider"
    xmlns="urn:mace:shibboleth:2.0:metadata"
    xmlns:resource="urn:mace:shibboleth:2.0:resource"
    xmlns:security="urn:mace:shibboleth:2.0:security"
    xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:mace:shibboleth:2.0:metadata http://shibboleth.net/schema/idp/shibboleth-metadata.xsd
                        urn:mace:shibboleth:2.0:resource http://shibboleth.net/schema/idp/shibboleth-resource.xsd 
                        urn:mace:shibboleth:2.0:security http://shibboleth.net/schema/idp/shibboleth-security.xsd
                        urn:oasis:names:tc:SAML:2.0:metadata http://docs.oasis-open.org/security/saml/v2.0/saml-schema-metadata-2.0.xsd">
                        
    <!-- ========================================================================================== -->
    <!--                             Metadata Configuration                                         -->
    <!--                                                                                            -->
    <!--  Below you place the mechanisms which define how to load the metadata for the SP you will  -->
    <!--  provide a service to.                                                                     -->
    <!--                                                                                            -->
    <!--  Two examples are provided.  The Shibboleth Documentation at                               -->
    <!--  https://wiki.shibboleth.net/confluence/display/IDP30/MetadataConfiguration                -->
    <!--  provides more details.                                                                    --> 
    <!--                                                                                            -->
    <!--  NOTE.  This file SHOULD NOT contain the metadata for this IdP.                            -->
    <!--                                                                                            -->
    <!-- ========================================================================================== -->

    <!--
    Example HTTP metadata provider.  Use this if you want to download the metadata
    from a remote source.

    You *MUST* provide the SignatureValidationFilter in order to function securely.
    Get the public key from the party publishing the metadata, and validate it
    with them via some out of band mechanism.

    The EntityRoleWhiteList saves memory by only loading metadata from SAML roles
    that the IdP needs to interoperate with. 
    -->
    
    <!--
    <MetadataProvider id="HTTPMetadata"
                      xsi:type="FileBackedHTTPMetadataProvider"
                      backingFile="%{idp.home}/metadata/localCopyFromXYZHTTP.xml"
                      metadataURL="http://WHATEVER"> 
        
        <MetadataFilter xsi:type="SignatureValidation" requireSignedRoot="true">
            <PublicKey>
                MIIBI.....
            </PublicKey>
        </MetadataFilter>
        <MetadataFilter xsi:type="RequiredValidUntil" maxValidityInterval="P30D"/>
        <MetadataFilter xsi:type="EntityRoleWhiteList">
            <RetainedRole>md:SPSSODescriptor</RetainedRole>
        </MetadataFilter>
    </MetadataProvider>
    -->   

    <!--
    Example file metadata provider.  Use this if you want to load metadata
    from a local file.  You might use this if you have some local SPs
    which are not "federated" but you wish to offer a service to.
    
    If you do not provide a SignatureValidation filter, then you have the responsibility to
    ensure that the contents are trustworthy.
    -->
    
    <!--
    <MetadataProvider id="LocalMetadata"  xsi:type="FilesystemMetadataProvider" metadataFile="PATH_TO_YOUR_METADATA"/>
    -->
{% for mp in shibidp_settings.metadata_providers %}
  {%- if mp is string %}
    {%- set mp_id = salt['hashutil.digest'](mp) %}
    {%- if mp.startswith('http') %}
      {#- just a URL, OK for testing, use HTTPS if possible #}
    <MetadataProvider{{ {
        'id': '_%s'|format(mp_id),
        'xsi:type': 'FileBackedHTTPMetadataProvider',
        'backingFile': '%s/metadata/%s.xml'|format('%{idp.home}', mp_id),
        'metadataURL': mp,
      }|xmlattr }}/>
    {%- else %}
      {#- assume inline metadata #}
    <MetadataProvider{{ {
        'id': '_%s'|format(mp_id),
        'xsi:type': 'FilesystemMetadataProvider',
        'failFastInitialization': 'true',
        'metadataFile': '%s/metadata/%s.xml'|format('%{idp.home}', mp_id),
      }|xmlattr }}/>
    {%- endif %}
  {%- elif mp is mapping %}
    {#- TODO: support other metadata provider types #}
    {%- set mp_id = salt['hashutil.digest'](mp.url) %}
    <MetadataProvider{{ {
        'id': '_%s'|format(mp_id),
        'xsi:type': 'FileBackedHTTPMetadataProvider',
        'backingFile': '%s/metadata/%s.xml'|format('%{idp.home}', mp_id),
        'metadataURL': mp.url,
      }|xmlattr }}>
    {#- TODO: support for additional metadata filters #}
    {%- for filter in mp.filters|default([]) %}
      {%- set mf_needs_end_tag = True
                                 if 'public_key' in filter or 'retained_roles' in filter else
                                 False %}
      <MetadataFilter{{ {
          'xsi:type': filter.type,
          'requireSignedRoot': None
                               if 'require_signed_root' not in filter else
                               'true'
                               if filter.require_signed_root else
                               'false',
          'maxValidityInterval': filter['max_validity_period']|default(None),
        }|xmlattr }}{{ '' if mf_needs_end_tag else ' /' }}>
      {%- if 'public_key' in filter %}
        <PublicKey>
{{ filter.public_key|indent(0) }}
        </PublicKey>
      {%- endif %}
      {%- for rr in filter.retained_roles|default([]) %}
        <RetainedRole>{{ rr }}</RetainedRole>
      {%- endfor %}
      {%- if mf_needs_end_tag %}
      </MetadataFilter>
      {%- endif %}
    {%- endfor %}
    </MetadataProvider>
  {%- endif %}
{% endfor %}
</MetadataProvider>
