{%- from "shibboleth/idp/map.jinja" import shibidp_settings with context -%}
{%- from "shibboleth/idp/lib.jinja" import generate_rp_profile with context -%}
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
       default-init-method="initialize"
       default-destroy-method="destroy">

    <!--
    Unverified RP configuration, defaults to no support for any profiles. Add <ref> elements to the list
    to enable specific default profile settings (as below), or create new beans inline to override defaults.
    
    "Unverified" typically means the IdP has no metadata, or equivalent way of assuring the identity and
    legitimacy of a requesting system. To run an "open" IdP, you can enable profiles here.
    -->
    <bean id="shibboleth.UnverifiedRelyingParty" parent="RelyingParty">
        <property name="profileConfigurations">
            <list>
            <!-- <bean parent="SAML2.SSO" p:encryptAssertions="false" /> -->
{%- for profile in shibidp_settings.unverified_rp_profiles %}{{ generate_rp_profile(profile, indent=16) }}{%- endfor %}
            </list>
        </property>
    </bean>

    <!--
    Default configuration, with default settings applied for all profiles, and enables
    the attribute-release consent flow.
    -->
    <bean id="shibboleth.DefaultRelyingParty" parent="RelyingParty">
        <property name="profileConfigurations">
            <list>
{%- for profile in shibidp_settings.default_rp_profiles %}{{ generate_rp_profile(profile, indent=16) }}{%- endfor %}
            </list>
        </property>
    </bean>

    <!-- Container for any overrides you want to add. -->

    <util:list id="shibboleth.RelyingPartyOverrides">
    
        <!--
        Override example that identifies a single RP by name and configures it
        for SAML 2 SSO without encryption. This is a common "vendor" scenario.
        -->
        <!--
        <bean parent="RelyingPartyByName" c:relyingPartyIds="https://sp.example.org">
            <property name="profileConfigurations">
                <list>
                    <bean parent="SAML2.SSO" p:encryptAssertions="false" />
                </list>
            </property>
        </bean>
        -->
{#- This manually generates XML attributes because SpEL isn't markup-safe. #}
{%- for rp in shibidp_settings.rp_profile_overrides %}
{%- set parent = rp.parent if 'parent' in rp and rp.parent is string else 'RelyingPartyByName' %}
{%- if parent == 'RelyingPartyByName' %}
{%- set rp_ids = rp.relying_parties
                 if rp.relying_parties is string else
                 rp.relying_parties[0]
                 if rp.relying_parties is sequence and rp.relying_parties|length == 1 else
                 '#{{\'%s\'}}'|format(rp.relying_parties|join('\', \'')) %}

        <bean parent='RelyingPartyByName' c:relyingPartyIds="{{ rp_ids }}">
{%- elif parent == 'RelyingPartyByGroup' %}
{%- set groups = rp.group_names
                 if rp.group_names is string else
                 rp.group_names[0]
                 if rp.group_names is sequence and rp.group_names|length == 1 else
                 '#{{\'%s\'}}'|format(rp.group_names|join('\', \'')) %}

        <bean parent="RelyingPartyByGroup" c:groupNames="{{ groups }}">
{%- elif parent == 'RelyingPartyByTag' %}

        <bean parent="RelyingPartyByTag">
            <constructor-arg name="candidates">
                <list>
{%- for tag_candidate in rp.tag_candidates %}
{%- for tag_name, tag_values in tag_candidate %}
{%- set values = tag_values
                 if tag_values is string else
                 tag_values[0]
                 if tag_values is sequence and tag_values|length == 1 else
                 '#{{\'%s\'}}'|format(tag_values|join('\', \'')) %}
                    <bean parent="TagCandidate" c:name="{{ tag_name }}" p:values="{{ values }}"/>
{%- endfor %}
{%- endfor %}
                </list>
            </constructor-arg>
{%- endif %}
            <property name="profileConfigurations">
                <list>{%- for profile in rp.profiles %}{{ generate_rp_profile(profile) }}{%- endfor %}
                </list>
            </property>
        </bean>
{%- endfor %}
        
    </util:list>

</beans>
