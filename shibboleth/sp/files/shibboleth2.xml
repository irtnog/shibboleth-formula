{%- from "shibboleth/sp/map.jinja" import shibsp_settings with context -%}
<SPConfig xmlns="urn:mace:shibboleth:2.0:native:sp:config"
    xmlns:conf="urn:mace:shibboleth:2.0:native:sp:config"
    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
    xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"    
    xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata"
    {{ {
         'logger': shibsp_settings.logger,
         'clockSkew': shibsp_settings.clock_skew,
         'unsafeChars': shibsp_settings.unsafe_chars,
         'allowedSchemes': shibsp_settings.allowed_schemes,
         'langFromClient': None if shibsp_settings.lang_from_client == None else
                           'true' if shibsp_settings.lang_from_client else 'false',
         'langPriority': shibsp_settings.lang_priority,
       }|xmlattr(False) }}>

    <!--
    By default, in-memory StorageService, ReplayCache, ArtifactMap, and SessionCache
    are used. See example-shibboleth2.xml for samples of explicitly configuring them.
    -->

    <!--
    To customize behavior for specific resources on Apache, and to link vhosts or
    resources to ApplicationOverride settings below, use web server options/commands.
    See https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPConfigurationElements for help.
    
    For examples with the RequestMap XML syntax instead, see the example-shibboleth2.xml
    file, and the https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPRequestMapHowTo topic.
    -->

    <!-- The ApplicationDefaults element is where most of Shibboleth's SAML bits are defined. -->
    <ApplicationDefaults{{ {
                             'entityID': shibsp_settings.entity_id,
                             'REMOTE_USER': shibsp_settings.remote_user|join(' '),
                           }|xmlattr }}>

        <!--
        Controls session lifetimes, address checks, cookie handling, and the protocol handlers.
        You MUST supply an effectively unique handlerURL value for each of your applications.
        The value defaults to /Shibboleth.sso, and should be a relative path, with the SP computing
        a relative value based on the virtual host. Using handlerSSL="true", the default, will force
        the protocol to be https. You should also set cookieProps to "https" for SSL-only sites.
        Note that while we default checkAddress to "false", this has a negative impact on the
        security of your site. Stealing sessions via cookie theft is much easier with this disabled.
        -->
        <Sessions{{ {
                      'lifetime': shibsp_settings.session_lifetime,
                      'timeout': shibsp_settings.session_timeout,
                      'relayState': shibsp_settings.session_relay_state,
                      'checkAddress': None if shibsp_settings.session_check_address == None else
                                      'true' if shibsp_settings.session_check_address else 'false',
                      'handlerSSL': None if shibsp_settings.session_handler_ssl == None else
                                    'true' if shibsp_settings.session_handler_ssl else 'false',
                      'cookieProps': shibsp_settings.session_cookie_properties,
                      'idpHistory': None if shibsp_settings.session_idp_history == None else
                                    'true' if shibsp_settings.session_idp_history else 'false',
                    }|xmlattr }}>

            <!--
            Configures SSO for a default IdP. To allow for >1 IdP, remove
            entityID property and adjust discoveryURL to point to discovery service.
            (Set discoveryProtocol to "WAYF" for legacy Shibboleth WAYF support.)
            You can also override entityID on /Login query string, or in RequestMap/htaccess.
            -->
            <SSO{{ {
                     'entityID': shibsp_settings.sso_default_idp,
                     'discoveryProtocol': shibsp_settings.sso_discovery_protocol,
                     'discoveryURL': shibsp_settings.sso_discovery_url,
                     'ECP': None if shibsp_settings.ecp_enabled == None else
                     'true' if shibsp_settings.ecp_enabled else 'false',
                   }|xmlattr }}>
              {{ shibsp_settings.session_sso|join(' ') }}
            </SSO>

            <!-- SAML and local-only logout. -->
            <Logout{{ {
                        'asynchronous': None if shibsp_settings.async_logout == None else
                                        'true' if shibsp_settings.async_logout else 'false',
                      }|xmlattr }}>{{ shibsp_settings.session_logout|join(' ') }}</Logout>
            
            <!-- Extension service that generates "approximate" metadata based on SP configuration. -->
            <!-- <Handler type="MetadataGenerator" Location="/Metadata" signing="false"/> -->

            <!-- Status reporting service. -->
            <!-- <Handler type="Status" Location="/Status" acl="127.0.0.1 ::1"/> -->

            <!-- Session diagnostic service. -->
            <!-- <Handler type="Session" Location="/Session" showAttributeValues="false"/> -->

            <!-- JSON feed of discovery information. -->
            <!-- <Handler type="DiscoveryFeed" Location="/DiscoFeed"/> -->
            {% for handler in shibsp_settings.session_handlers %}
            <Handler{{ {
                         'type': handler.type,
                         'Location': handler.location,
                         'signing': None if handler.signing|default(None) == None else
                                    'true' if handler.signing else 'false',
                         'showAttributeValues': None if handler.show_attribute_values|default(None) == None else
                                                'true' if handler.show_attribute_values else 'false',
                         'acl': None if handler.acl|default(None) == None else
                                handler.acl|join(' '),
                       }|xmlattr }} />
            {% endfor %}
        </Sessions>

        <!--
        Allows overriding of error template information/filenames. You can
        also add attributes with values that can be plugged into the templates.
        -->
        <Errors{{ {
                    'supportContact': shibsp_settings.support_contact,
                    'helpLocation': shibsp_settings.help_location,
                    'styleSheet': shibsp_settings.style_sheet,
                  }|xmlattr }} />
        
        <!-- Example of remotely supplied batch of signed metadata. -->
        <!--
        <MetadataProvider type="XML" validate="true"
	      uri="http://example.org/federation-metadata.xml"
              backingFilePath="federation-metadata.xml" reloadInterval="7200">
            <MetadataFilter type="RequireValidUntil" maxValidityInterval="2419200"/>
            <MetadataFilter type="Signature" certificate="fedsigner.pem"/>
            <DiscoveryFilter type="Blacklist" matcher="EntityAttributes" trimTags="true" 
              attributeName="http://macedir.org/entity-category"
              attributeNameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri"
              attributeValue="http://refeds.org/category/hide-from-discovery" />
        </MetadataProvider>
        -->

        <!-- Example of locally maintained metadata. -->
        <!--
        <MetadataProvider type="XML" validate="true" file="partner-metadata.xml"/>
        -->
{% for metadata_provider in shibsp_settings.metadata_providers %}
        {%- if metadata_provider is mapping %}
          {%- set mp = metadata_provider %}
        {%- else %}
          {%- set mp = { 'type': 'XML', 'url': metadata_provider } %}
        {%- endif %}
        <MetadataProvider{{ {
                              'type': mp.type,
                              'url': mp.url|default(None),
                              'backingFilePath': '_%s.xml'|format(salt['hashutil.digest'](mp.url)),
                              'maxRefreshDelay': mp.max_refresh_delay|default(None),
                              'legacyOrgNames': None if mp.legacy_org_names|default(None) == None else
                                                'true' if mp.legacy_org_names else 'false',
                            }|xmlattr }}
        {%- if 'metadata_filters' not in mp and 'discovery_filters' not in mp %} />{%- else %}>
            {%- for filter in mp.metadata_filters|default([]) %}
            <MetadataFilter{{ {
                                'type': filter.type,
                                'certificate': '_%s.pem'|format(salt['hashutil.digest'](mp.url))
                                               if 'certificate' in filter else None,
                                'verifyRoles': None if filter.verify_roles|default(None) == None else
                                               'true' if filter.verify_roles else 'false',
                                'verifyName': None if filter.verify_name|default(None) == None else
                                              'true' if filter.verify_name else 'false',
                                'verifyBackup': None if filter.verify_backup|default(None) == None else
                                                'true' if filter.verify_backup else 'false',
                                'matcher': filter.matcher|default(None),
                                'trimTags': None if filter.trim_tags|default(None) == None else
                                            'true' if filter.trim_tags else 'false',
                                'maxValidityInterval': filter.max_validity_interval|default(None),
                              }|xmlattr }}
              {%- if filter.type in ['Whitelist', 'Blacklist', 'EntityRoleWhiteList'] %}>
                {%- for item in filter.entries %}
                  {%- if filter.matcher|default(None) == 'EntityAttributes' %}
                    {%- set attribute = (item|dictsort)[0][0] %}
                    {%- if (item|dictsort)[0][1] is mapping %}
                      {%- set name_format = ((item|dictsort)[0][1]|dictsort)[0][0] %}
                      {%- set attribute_values = ((item|dictsort)[0][1]|dictsort)[0][1] %}
                    {%- else %}
                      {%- set name_format = 'urn:oasis:names:tc:SAML:2.0:attrname-format:uri' %}
                      {%- set attribute_values = (item|dictsort)[0][1] %}
                    {%- endif %}
                    {%- if attribute_values is string %}
                      {%- set attribute_values = [ attribute_values ] %}
                    {%- endif %}
                    {%- for attribute_value in attribute_values %}
                <saml:Attribute name="{{ attribute }}" NameFormat="{{ name_format }}">
                    <saml:AttributeValue>{{ attribute_value }}</saml:AttributeValue>
                </saml:Attribute>
                    {%- endfor %}
                  {%- else %}
                    {%- set tag = 'Include' if filter.type == 'Whitelist' else
                                  'Exclude' if filter.type == 'Blacklist' else
                                  'RetainedRole' %}
                <{{ tag }}>{{ item }}</{{ tag }}>
                  {%- endif %}
                {%- endfor %}
            </MetadataFilter>
              {%- else %} />
              {%- endif %}
            {%- endfor %}
            {%- for filter in mp.discovery_filter|default([]) %}
            {%- endfor %}
        </MetadataProvider>
        {%- endif %}
{% endfor %}
        <!-- Map to extract attributes from SAML assertions. -->
        <AttributeExtractor type="XML" validate="true" reloadChanges="false" path="attribute-map.xml"/>
        
        <!-- Use a SAML query if no attributes are supplied during SSO. -->
        <AttributeResolver type="Query" subjectMatch="true"/>

        <!-- Default filtering policy for recognized attributes, lets other data pass. -->
        <AttributeFilter type="XML" validate="true" path="attribute-policy.xml"/>

        <!-- Simple file-based resolver for using a single keypair. -->
        <CredentialResolver type="File" key="sp-key.pem" certificate="sp-cert.pem"/>

        <!--
        The default settings can be overridden by creating ApplicationOverride elements (see
        the https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPApplicationOverride topic).
        Resource requests are mapped by web server commands, or the RequestMapper, to an
        applicationId setting.
        
        Example of a second application (for a second vhost) that has a different entityID.
        Resources on the vhost would map to an applicationId of "admin":
        -->
        <!--
        <ApplicationOverride id="admin" entityID="https://admin.example.org/shibboleth"/>
        -->
    </ApplicationDefaults>
    
    <!-- Policies that determine how to process and authenticate runtime messages. -->
    <SecurityPolicyProvider type="XML" validate="true" path="security-policy.xml"/>

    <!-- Low-level configuration about protocols and bindings available for use. -->
    <ProtocolProvider type="XML" validate="true" reloadChanges="false" path="protocols.xml"/>

</SPConfig>
